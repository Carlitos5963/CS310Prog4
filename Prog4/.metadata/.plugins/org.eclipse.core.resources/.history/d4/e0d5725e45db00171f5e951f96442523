/*  Jose Carlos Gomez
    cssc0898
*/

package data_structures;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.ConcurrentModificationException;

public class BinarySearchTree<K extends Comparable<K>,V> implements DictionaryADT<K,V> {
	private Node<K,V> root;
	private int currentSize, modCounter;
	
	private class Node<K,V>{
		private K key;
		private V value;
		private Node<K,V> leftChild;
		private Node<K,V> rightChild;
		
		public Node(K k, V v) {
			key = k;
			value = v;
			leftChild = rightChild = null;
		}
	}
	
	public BinarySearchTree() {
		root = null;
		currentSize = 0;
	}
	

	// Returns true if the dictionary has an object identified by
	// key in it, otherwise false.
	public boolean contains(K key) {
		return getValue(key) != null;
	}

	// Adds the given key/value pair to the dictionary.  Returns 
	// false if the dictionary is full, or if the key is a duplicate.
	// Returns true if addition succeeded.
	public boolean add(K key, V value) {
		if(contains(key))
			return false;
		if(root == null)
			root = new Node<K,V>(key, value);
		else
			insert(key, value, root, null, false);
		currentSize++;
		modCounter++;
		return true;
	}
	
	private void insert(K key, V value, Node<K,V> n, Node<K,V> parent, boolean wentLeft) {
		if(n == null) {
			if(wentLeft) 
				parent.leftChild = new Node<K,V>(key,value);
			else
				parent.rightChild = new Node<K,V>(key, value);
		}
		else if(key.compareTo(n.key) < 0)
			insert(key, value, n.leftChild, n, true);
		else
			insert(key, value, n.rightChild, n, false);
	}

	// Deletes the key/value pair identified by the key parameter.
	// Returns true if the key/value pair was found and removed,
	// otherwise false.
	public boolean delete(K key) {
		if(isEmpty())
			return false;
		if(!delete(key, root, null, false))
			return false;
		currentSize--;
		modCounter++;
		return true;
	}
	
	public boolean delete(K key, Node<K,V> n, Node<K,V> parent, boolean wentLeft) {
		if(n.leftChild == null && n.rightChild == null) {
			if(parent == null)
				root = null;
			else if(wentLeft)
				parent.leftChild = null;
			else
				parent.rightChild = null;
		}
		else if(n.leftChild == null) {
			if(parent == null)
				root = n.rightChild;
			else if(wentLeft)
				parent.leftChild = n.rightChild;
			else
				parent.rightChild = n.rightChild;
		}
		else if(n.rightChild == null) {
			if(parent == null)
			    root = n.leftChild;
			else if(wentLeft)
			    parent.leftChild = n.leftChild;
			else
			    parent.rightChild = n.leftChild;
		   }
		else {
			////////////////////////////////////////////////////////////////////idk
		}
		return true;
	}

	
	private V find(K key, Node<K,V> n) {
		if(n == null)
			return null;
		if(((Comparable<K>)key).compareTo(n.key) < 0) 
			return find(key, n.leftChild);
		if(((Comparable<K>)key).compareTo(n.key) > 0) 
			return find(key, n.rightChild);
		return (V)n.value;
	}
	// Returns the value associated with the parameter key.  Returns
	// null if the key is not found or the dictionary is empty.
	public V getValue(K key) {
		return find(key, root);
	}

	// Returns the key associated with the parameter value.  Returns
	// null if the value is not found in the dictionary.  If more 
	// than one key exists that matches the given value, returns the
	// first one found. 
	public K getKey(V value);

	// Returns the number of key/value pairs currently stored 
	// in the dictionary
	public int size() {
		return currentSize;
	}

	// Returns true if the dictionary is at max capacity
	public boolean isFull() {
		return false;
	}

	// Returns true if the dictionary is empty
	public boolean isEmpty() {
		return currentSize == 0;
	}

	// Returns the Dictionary object to an empty state.
	public void clear() {
		root = null;
		currentSize = 0;
		modCounter = 0;
	}

	//Returns an Iterator of the keys in the dictionary, in ascending
	//sorted order.  The iterator must be fail-fast.
	public Iterator<K> keys();

	//Returns an Iterator of the values in the dictionary.  The
	//order of the values must match the order of the keys. 
	//The iterator must be fail-fast. 
	public Iterator<V> values();


	
	}

