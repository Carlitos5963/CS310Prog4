/*  Jose Carlos Gomez
    cssc0898
*/

package data_structures;

import java.util.Iterator;
import java.util.NoSuchElementException;

import data_structures.Hashtable.DictionaryNode;
import data_structures.Hashtable.IteratorHelper;
import data_structures.Hashtable.KeyIteratorHelper;

import java.util.ConcurrentModificationException;

public class BinarySearchTree<K extends Comparable<K>, V extends Comparable<V>> implements DictionaryADT<K, V> {
	private Node<K, V> root;
	private int currentSize, modCounter;

	private class Node<K, V> {
		private K key;
		private V value;
		private Node<K, V> leftChild;
		private Node<K, V> rightChild;

		public Node(K k, V v) {
			key = k;
			value = v;
			leftChild = rightChild = null;
		}

		public int compareTo(Node<K, V> node) {
			return ((Comparable<V>) value).compareTo((V) node.value);
		}
	}

	public BinarySearchTree() {
		root = null;
		currentSize = 0;
	}

	// Returns true if the dictionary has an object identified by
	// key in it, otherwise false.
	public boolean contains(K key) {
		return getValue(key) != null;
	}

	// Adds the given key/value pair to the dictionary. Returns
	// false if the dictionary is full, or if the key is a duplicate.
	// Returns true if addition succeeded.
	public boolean add(K key, V value) {
		if (contains(key))
			return false;
		if (root == null)
			root = new Node<K, V>(key, value);
		else
			insert(key, value, root, null, false);
		currentSize++;
		modCounter++;
		return true;
	}

	private void insert(K key, V value, Node<K, V> n, Node<K, V> parent, boolean wentLeft) {
		if (n == null) {
			if (wentLeft)
				parent.leftChild = new Node<K, V>(key, value);
			else
				parent.rightChild = new Node<K, V>(key, value);
		} else if (key.compareTo(n.key) < 0)
			insert(key, value, n.leftChild, n, true);
		else
			insert(key, value, n.rightChild, n, false);
	}

	// Deletes the key/value pair identified by the key parameter.
	// Returns true if the key/value pair was found and removed,
	// otherwise false.
	public boolean delete(K key) {
		if (isEmpty())
			return false;
		if (!delete(key, root, null, false))
			return false;
		currentSize--;
		modCounter++;
		return true;
	}

	public boolean delete(K key, Node<K, V> n, Node<K, V> parent, boolean wentLeft) {
		if (n.leftChild == null && n.rightChild == null) {
			if (parent == null)
				root = null;
			else if (wentLeft)
				parent.leftChild = null;
			else
				parent.rightChild = null;
			
		} else if (n.leftChild == null) {
			if (parent == null)
				root = n.rightChild;
			else if (wentLeft)
				parent.leftChild = n.rightChild;
			else
				parent.rightChild = n.rightChild;
			
		} else if (n.rightChild == null) {
			if (parent == null)
				root = n.leftChild;
			else if (wentLeft)
				parent.leftChild = n.leftChild;
			else
				parent.rightChild = n.leftChild;
			
		} else {
			Node<K, V> temp = successor(n.rightChild);
			if (temp == null) {
				Node<K,V> temp2 = n;
				n = n.rightChild;
				n.leftChild = temp2.leftChild;
				//n.key = n.rightChild.key;
				//n.value = n.rightChild.value;
				//n.rightChild = n.rightChild.rightChild;
			} else {
				n.key = temp.key;
				n.value = temp.value;
			}
		}
		return true;
	}

	private Node<K, V> successor(Node<K, V> n) {
		Node<K, V> parentNode = null;
		while (n.leftChild != null) {
			parentNode = n;
			n = n.leftChild;
		}
		if (parentNode == null)
			return null;
		else
			parentNode.leftChild = n.rightChild;
		return n;
	}

	private V find(K key, Node<K, V> n) {
		if (n == null)
			return null;
		if (((Comparable<K>) key).compareTo(n.key) < 0)
			return find(key, n.leftChild);
		if (((Comparable<K>) key).compareTo(n.key) > 0)
			return find(key, n.rightChild);
		return (V) n.value;
	}

	// Returns the value associated with the parameter key. Returns
	// null if the key is not found or the dictionary is empty.
	public V getValue(K key) {
		return find(key, root);
	}

	// Returns the key associated with the parameter value. Returns
	// null if the value is not found in the dictionary. If more
	// than one key exists that matches the given value, returns the
	// first one found.
	public K getKey(V value) {
		if (isEmpty())
			return null;
		Node<K, V> temp;
		Iterator<K> keyitr = keys();
		Iterator<V> valitr = values();
		while (keyitr.hasNext() && valitr.hasNext()) {
			temp = new Node<K, V>(keyitr.next(), valitr.next());
			if (temp.value.compareTo((V) value) == 0)
				return temp.key;
		}
		return null;
	}

	// Returns the number of key/value pairs currently stored
	// in the dictionary
	public int size() {
		return currentSize;
	}

	// Returns true if the dictionary is at max capacity
	public boolean isFull() {
		return false;
	}

	// Returns true if the dictionary is empty
	public boolean isEmpty() {
		return currentSize == 0;
	}

	// Returns the Dictionary object to an empty state.
	public void clear() {
		root = null;
		currentSize = 0;
		modCounter = 0;
	}

	// Returns an Iterator of the keys in the dictionary, in ascending
	// sorted order. The iterator must be fail-fast.
	public Iterator<K> keys() {
		return new KeyIteratorHelper();
	}

	// Returns an Iterator of the values in the dictionary. The
	// order of the values must match the order of the keys.
	// The iterator must be fail-fast.
	public Iterator<V> values() {
		return new ValueIteratorHelper();
	}

	abstract class IteratorHelper<E> implements Iterator<E> {
		protected Node<K, V>[] nodes;
		protected int idx, index;
		protected long modCheck;

		public IteratorHelper() {
			nodes = new Node[currentSize];
			index = idx = 0;
			modCheck = modCounter;
			inOrder(root);
		}

		public boolean hasNext() {
			if (modCheck != modCounter)
				throw new ConcurrentModificationException();
			return idx < currentSize;
		}

		public abstract E next();

		public void remove() {
			throw new UnsupportedOperationException();
		}

		private void inOrder(Node<K, V> n) {
			if (n != null) {
				inOrder(n.leftChild);
				nodes[index++] = n;
				inOrder(n.rightChild);
			}
		}
	}

	class KeyIteratorHelper<K> extends IteratorHelper<K> {
		public KeyIteratorHelper() {
			super();
		}

		public K next() {
			if (!hasNext())
				throw new NoSuchElementException();
			return (K) nodes[idx++].key;
		}
	}

	class ValueIteratorHelper<V> extends IteratorHelper<V> {
		public ValueIteratorHelper() {
			super();
		}

		public V next() {
			if (!hasNext())
				throw new NoSuchElementException();
			return (V) nodes[idx++].value;
		}
	}

}
